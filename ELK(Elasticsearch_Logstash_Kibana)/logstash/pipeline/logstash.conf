input {
    file {
        path => ["/addata/logs/addata*"]
        type => "addata"
        #设置多长时间扫描目录，发现新文件
        discover_interval => 15
        #设置多长时间检测文件是否修改
        stat_interval => 1
        #监听文件的起始位置，默认是end
        start_position => "beginning"
        sincedb_path => "/etc/logstash/records/addata_record_last_run"
        #设置多长时间会写入读取的位置信息
        sincedb_write_interval => 15
    }

    file {
        path => ["/addata/logs/jobs*"]
        type => "jobs"
        #设置多长时间扫描目录，发现新文件
        discover_interval => 15
        #设置多长时间检测文件是否修改
        stat_interval => 1
        #监听文件的起始位置，默认是end
        start_position => "beginning"
        sincedb_path => "/etc/logstash/records/jobs_record_last_run"
        #设置多长时间会写入读取的位置信息
        sincedb_write_interval => 15
    }

    file {
        path => ["/addata/logs/cron*"]
        type => "cron"
        #设置多长时间扫描目录，发现新文件
        discover_interval => 15
        #设置多长时间检测文件是否修改
        stat_interval => 1
        #监听文件的起始位置，默认是end
        start_position => "beginning"
        sincedb_path => "/etc/logstash/records/cron_record_last_run"
        #设置多长时间会写入读取的位置信息
        sincedb_write_interval => 15
    }
    file {
        path => ["/gamejobs/**/logs/*"]
        type => "gamejobs"
        #设置多长时间扫描目录，发现新文件
        discover_interval => 15
        #设置多长时间检测文件是否修改
        stat_interval => 1
        #监听文件的起始位置，默认是end
        start_position => "beginning"
        sincedb_path => "/etc/logstash/records/gamejobs_record_last_run"
        #设置多长时间会写入读取的位置信息
        sincedb_write_interval => 15
    }
}


filter {
    grok {
        match => {"message" => [
            "%{TIMESTAMP_ISO8601:datetime} - %{DATA:thread} - %{DATA:datasource} - %{LOGLEVEL:loglevel} - %{DATA:filename} - %{NUMBER:filerow} - %{DATA:appname}-%{DATA:platform}-%{DATA:job}, %{GREEDYDATA:note}", 
            "%{TIMESTAMP_ISO8601:datetime} - %{DATA:thread} - %{DATA:datasource} - %{LOGLEVEL:loglevel} - %{DATA:filename} - %{NUMBER:filerow} - %{GREEDYDATA:note}"
            ]
        }
    }
    if [datasource] == "charset_normalizer" {
        drop {}
    }

    date {
        match => ["datetime", "yyyy-MM-dd HH:mm:ss.SSS", "UNIX_MS"]
        target => "@timestamp"
        timezone => "+08:00"
    }
}
  
output {
    # stdout {
    #         codec => rubydebug
    # }
    if [type] == "addata" {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "K4n787#cbNhm$E"
            ecs_compatibility => disabled
            index => "addata-%{+YYYY.MM.dd}"
        }
    }
    else if [type] == 'jobs' {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "K4n787#cbNhm$E"
            ecs_compatibility => disabled
            index => "jobs-%{+YYYY.MM.dd}"
        }
    }
    else if [type] == 'cron' {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "K4n787#cbNhm$E"
            ecs_compatibility => disabled
            index => "cron-%{+YYYY.MM.dd}"
        }
    }
    else if [type] == 'gamejobs' {
        elasticsearch {
            hosts => "elasticsearch:9200"
            user => "elastic"
            password => "K4n787#cbNhm$E"
            ecs_compatibility => disabled
            index => "gamejobs-%{+YYYY.MM.dd}"
        }
    }
    else {
        stdout {
            codec => rubydebug
        }
    }
}
